(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{214:function(a,t,e){a.exports=e.p+"assets/img/ast-tree.b03a8a06.png"},301:function(a,t,e){"use strict";e.r(t);var r=e(0),s=Object(r.a)({},(function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h1",{attrs:{id:"什么是-ast"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是-ast","aria-hidden":"true"}},[a._v("#")]),a._v(" 什么是 AST")]),a._v(" "),r("h2",{attrs:{id:"简介"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#简介","aria-hidden":"true"}},[a._v("#")]),a._v(" 简介")]),a._v(" "),r("p",[a._v("AST，abstract syntax tree（抽象语法树的缩写），就是编程源码的语法抽象、结构化的一种表现形式。")]),a._v(" "),r("p",[a._v("如 "),r("code",[a._v("JavaScript")]),a._v(" 中的这么一句赋值语句。")]),a._v(" "),r("div",{staticClass:"language-js extra-class"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("const")]),a._v(" a "),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n")])])]),r("p",[a._v("转换成 "),r("code",[a._v("AST")]),a._v(" 后就像下面这样。")]),a._v(" "),r("p",[r("img",{attrs:{src:e(214),alt:"ast-tree"}})]),a._v(" "),r("p",[a._v("这种与编程语言无关的抽象、结构化表达，就是 "),r("code",[a._v("AST")]),a._v("。")]),a._v(" "),r("h2",{attrs:{id:"身边的-ast"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#身边的-ast","aria-hidden":"true"}},[a._v("#")]),a._v(" 身边的 AST")]),a._v(" "),r("p",[a._v("我们也许会在某个社区、某篇文章中看到过 "),r("code",[a._v("AST")]),a._v(" 这样的字眼，在不了解它之前，觉得它离我们很“遥远”，但其实 "),r("code",[a._v("AST")]),a._v(" 与编程却是息息相关。")]),a._v(" "),r("h3",{attrs:{id:"程序执行"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#程序执行","aria-hidden":"true"}},[a._v("#")]),a._v(" 程序执行")]),a._v(" "),r("ul",[r("li",[r("p",[a._v("无论是解释型语言还是编译型语言，在真正运行前，它们都有共同的一步，那就是需要将源码解析成结构化的文本，也就是 "),r("code",[a._v("AST")]),a._v("。")])]),a._v(" "),r("li",[r("p",[r("code",[a._v("AST")]),a._v(" 除了让源码结构化，同时也是语义分析的重要组成部分，源码结构化后让编译器可以校验语法是否使用正确。")])]),a._v(" "),r("li",[r("p",[a._v("最后， "),r("code",[a._v("AST")]),a._v(" 会转化成机器所能识别的字节码，让机器按照指令运行起来。")])])]),a._v(" "),r("h3",{attrs:{id:"工程化中的工具"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#工程化中的工具","aria-hidden":"true"}},[a._v("#")]),a._v(" 工程化中的工具")]),a._v(" "),r("ul",[r("li",[r("p",[a._v("在前端工程化之中，我们所熟悉的 "),r("code",[a._v("webpack")]),a._v("、"),r("code",[a._v("babel")]),a._v("、"),r("code",[a._v("eslint")]),a._v(" 等无一不是运作在 "),r("code",[a._v("AST")]),a._v(" 之上。")])]),a._v(" "),r("li",[r("p",[r("code",[a._v("AST")]),a._v(" 的结构化表达让这些工具都能“读懂”源码，从而进行静态分析，实现更多扩展功能。")])])]),a._v(" "),r("h2",{attrs:{id:"ast-的生成步骤"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#ast-的生成步骤","aria-hidden":"true"}},[a._v("#")]),a._v(" AST 的生成步骤")]),a._v(" "),r("h3",{attrs:{id:"词法分析"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#词法分析","aria-hidden":"true"}},[a._v("#")]),a._v(" 词法分析")]),a._v(" "),r("p",[a._v("首先，词法分析，也叫做扫描（scanner）。将我们的源码按照规则转换成一个个 "),r("code",[a._v("token")]),a._v("。")]),a._v(" "),r("p",[a._v("如。")]),a._v(" "),r("div",{staticClass:"language-js extra-class"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("const")]),a._v(" a "),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n")])])]),r("p",[a._v("结果词法分析后的表达可能是。")]),a._v(" "),r("div",{staticClass:"language-txt extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("Keyword(const) Identifier(a) Punctuator(=) Numeric(1)\n")])])]),r("p",[a._v("这个过程也可理解为分词，比如这么一句话 “今天天气真好啊。” 能正确理解这句话的前提，就是分词、断句。")]),a._v(" "),r("p",[a._v("那么这句话可以断句为 “今天”，“天气”，“真好”，“啊”，“。”。")]),a._v(" "),r("h3",{attrs:{id:"语法分析"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#语法分析","aria-hidden":"true"}},[a._v("#")]),a._v(" 语法分析")]),a._v(" "),r("p",[a._v("在词法分析之后，就开始语法分析，也叫做解析（parser）。它会将经过词法分析后得到的 "),r("code",[a._v("tokens")]),a._v(" 根据语法规则转换成树的表达形式，也就是 "),r("code",[a._v("AST")]),a._v("，就像文章中的第一张图一样。")]),a._v(" "),r("p",[a._v("这里也可以理解为正确断句（词法分析）之后，才能根据每个词的意思，去理解整个句子的意思。")]),a._v(" "),r("p",[a._v("推荐一个网站 "),r("a",{attrs:{href:"https://astexplorer.net/",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://astexplorer.net/"),r("OutboundLink")],1),a._v("，能够在线将源码转换成 "),r("code",[a._v("AST")]),a._v("，方便我们快速验证、加深理解。")]),a._v(" "),r("h2",{attrs:{id:"babel-中的-ast"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#babel-中的-ast","aria-hidden":"true"}},[a._v("#")]),a._v(" Babel 中的 AST")]),a._v(" "),r("h2",{attrs:{id:"参考"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考","aria-hidden":"true"}},[a._v("#")]),a._v(" 参考")]),a._v(" "),r("ol",[r("li",[r("a",{attrs:{href:"https://blog.sessionstack.com/how-javascript-works-parsing-abstract-syntax-trees-asts-5-tips-on-how-to-minimize-parse-time-abfcf7e8a0c8",target:"_blank",rel:"noopener noreferrer"}},[a._v("How JavaScript works: Parsing, Abstract Syntax Trees (ASTs) + 5 tips on how to minimize parse time"),r("OutboundLink")],1)]),a._v(" "),r("li",[r("a",{attrs:{href:"https://en.wikipedia.org/wiki/Abstract_syntax_tree",target:"_blank",rel:"noopener noreferrer"}},[a._v("Abstract syntax tree"),r("OutboundLink")],1)]),a._v(" "),r("li",[r("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/27289600",target:"_blank",rel:"noopener noreferrer"}},[a._v("Babel 是如何读懂 JS 代码的"),r("OutboundLink")],1)]),a._v(" "),r("li",[r("a",{attrs:{href:"https://itnext.io/ast-for-javascript-developers-3e79aeb08343",target:"_blank",rel:"noopener noreferrer"}},[a._v("AST for JavaScript developers"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=s.exports}}]);