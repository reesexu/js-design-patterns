(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{268:function(r,t,e){"use strict";e.r(t);var a=e(0),s=Object(a.a)({},(function(){var r=this,t=r.$createElement,e=r._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[e("h1",{attrs:{id:"docker-安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-安装","aria-hidden":"true"}},[r._v("#")]),r._v(" Docker 安装")]),r._v(" "),e("h2",{attrs:{id:"基本安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本安装","aria-hidden":"true"}},[r._v("#")]),r._v(" 基本安装")]),r._v(" "),e("p",[r._v("以下示例均在 ubuntu 20.04 下进行。")]),r._v(" "),e("p",[r._v("Docker 可安装在各个平台， 分别有 Desktop 和 Server，Desktop 如其名就是带有可视化桌面的客户端，适用于 Mac 和 Windows 系统，而且 linux 则是安装 Server。")]),r._v(" "),e("p",[r._v("从"),e("a",{attrs:{href:"https://docs.docker.com/engine/install/",target:"_blank",rel:"noopener noreferrer"}},[r._v("https://docs.docker.com/engine/install/"),e("OutboundLink")],1),r._v("中可查看不同平台下 Docker 的安装方法。")]),r._v(" "),e("p",[r._v("安装成功后，可执行"),e("code",[r._v("docker version")]),r._v("，获取当前所安装的 Docker 信息。")]),r._v(" "),e("h2",{attrs:{id:"安装后的可选操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装后的可选操作","aria-hidden":"true"}},[r._v("#")]),r._v(" 安装后的可选操作")]),r._v(" "),e("h3",{attrs:{id:"使用非-root-用户管理-docker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用非-root-用户管理-docker","aria-hidden":"true"}},[r._v("#")]),r._v(" 使用非 root 用户管理 Docker")]),r._v(" "),e("p",[r._v("因为 Docker 后台程序绑定了 Unix socket ，Unix socket 默认归属于 root 用户，其它用户可以通过 sudo 访问。Docker 后台永远以 root 用户运行。")]),r._v(" "),e("p",[r._v("当然这一默认行为会有一定的安全风险，可通过"),e("a",{attrs:{href:"https://docs.docker.com/engine/security/#docker-daemon-attack-surface",target:"_blank",rel:"noopener noreferrer"}},[r._v("https://docs.docker.com/engine/security/#docker-daemon-attack-surface"),e("OutboundLink")],1),r._v("了解，\n为此 Docker 现有一实验性特性，能够通过非 root 用户运行 Docker 后台，可从"),e("a",{attrs:{href:"https://docs.docker.com/engine/security/rootless/",target:"_blank",rel:"noopener noreferrer"}},[r._v("https://docs.docker.com/engine/security/rootless/"),e("OutboundLink")],1),r._v("了解。")]),r._v(" "),e("p",[r._v("所以在执行 Docker 相关命令的时候，非 root 用户需要加上 sudo 前缀，如"),e("code",[r._v("sudo docker version")]),r._v("。")]),r._v(" "),e("p",[r._v("如果觉得每次输入 sudo 太麻烦，可以将当前用户添加至 docker 分组。执行如下命令：")]),r._v(" "),e("ol",[e("li",[e("p",[r._v("如果没有 docker 这个分组，则需先创建。（安装启动 docker 已默认创建该分组）。可通过查看系统的 "),e("code",[r._v("/etc/group")]),r._v(" 文件来确定分组是否已存在。")]),r._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[r._v("sudo")]),r._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[r._v("groupadd")]),r._v(" docker\n")])])])]),r._v(" "),e("li",[e("p",[r._v("将当前用户添加至 docker 分组。下方的"),e("code",[r._v("-aG")]),r._v("，a 是 add、append，G 是 group，下方命令就是将当前用户添加至 docker 分组。")]),r._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[r._v("sudo")]),r._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[r._v("usermod")]),r._v(" -aG docker "),e("span",{pre:!0,attrs:{class:"token environment constant"}},[r._v("$USER")]),r._v("\n")])])])])]),r._v(" "),e("p",[r._v("添加成功后重新登入该账户，执行 Docker 相关命令就不用再加上 sudo 先了。")]),r._v(" "),e("h3",{attrs:{id:"配置-docker-开机自启动"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置-docker-开机自启动","aria-hidden":"true"}},[r._v("#")]),r._v(" 配置 Docker 开机自启动")]),r._v(" "),e("p",[r._v("大多数 Linux 系统都是通过 systemd 来管理服务的开机自启动。在 Debian 和 Ubuntu 中 Docker 服务是默认随开机自启动的。")]),r._v(" "),e("p",[r._v("如在想要手动启动这一特性，可执行以下命令：")]),r._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[r._v("sudo")]),r._v(" systemctl "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[r._v("enable")]),r._v(" docker.service\n"),e("span",{pre:!0,attrs:{class:"token function"}},[r._v("sudo")]),r._v(" systemctl "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[r._v("enable")]),r._v(" containerd.service\n")])])]),e("p",[r._v("如想要关闭开机自启动，可执行以下命令。")]),r._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[r._v("sudo")]),r._v(" systemctl disable docker.service\n"),e("span",{pre:!0,attrs:{class:"token function"}},[r._v("sudo")]),r._v(" systemctl disable containerd.service\n")])])]),e("p",[r._v("更多的安装后可选操作可查看"),e("a",{attrs:{href:"https://docs.docker.com/engine/install/linux-postinstall/",target:"_blank",rel:"noopener noreferrer"}},[r._v("https://docs.docker.com/engine/install/linux-postinstall/"),e("OutboundLink")],1),r._v("。")]),r._v(" "),e("h2",{attrs:{id:"设置国内镜像加速"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#设置国内镜像加速","aria-hidden":"true"}},[r._v("#")]),r._v(" 设置国内镜像加速")]),r._v(" "),e("p",[r._v("Docker 默认从国外的 Docker Hub 拉取镜像，因不可抵抗因素，这个过程会变得非常困难。所以可以将镜像源设置为国内的云服务商，来加速镜像拉取。可多设置几个，防止单个源宕机。")]),r._v(" "),e("p",[r._v("编辑 "),e("code",[r._v("/etc/docker/daemon.json")]),r._v(" 文件，如不存在则创建。在文件中添加如下内容：")]),r._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("{")]),r._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[r._v('"registry-mirrors"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v(":")]),r._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("[")]),r._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[r._v('"https://hub-mirror.c.163.com"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v(",")]),r._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[r._v('"https://registry.docker-cn.com"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v(",")]),r._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[r._v('"https://mirror.baidubce.com"')]),r._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("]")]),r._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("}")]),r._v("\n")])])]),e("p",[r._v("保存修改之后，执行如下命令：")]),r._v(" "),e("ol",[e("li",[e("p",[r._v("重载所有修改过的服务配置文件。")]),r._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[r._v("sudo")]),r._v(" systemctl daemon-reload\n")])])])]),r._v(" "),e("li",[e("p",[r._v("重启 Docker 服务。")]),r._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[r._v("sudo")]),r._v(" systemctl restart docker\n")])])])])]),r._v(" "),e("p",[r._v("最后可执行"),e("code",[r._v("docker info")]),r._v(",如输出中存在下方信息，则说明配置成功。")]),r._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[r._v(" Registry Mirrors:\n  https://hub-mirror.c.163.com/\n  https://registry.docker-cn.com/\n  https://mirror.baidubce.com/\n")])])]),e("h2",{attrs:{id:"安装可视化管理工具"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装可视化管理工具","aria-hidden":"true"}},[r._v("#")]),r._v(" 安装可视化管理工具")]),r._v(" "),e("p",[r._v("为了更方便快捷、低成本地去管理我们的 Docker，我们可以使用安装使用"),e("a",{attrs:{href:"https://github.com/portainer/portainer",target:"_blank",rel:"noopener noreferrer"}},[r._v("portainer"),e("OutboundLink")],1),r._v("。")]),r._v(" "),e("p",[r._v("portainer 是一个轻量级的 Docker 可视化管理工具。有了它能够仅通过可视化的 web 界面交互，轻松地对 Docker 环境进行管理、维护，而无需执行各种 Docker 命令。")]),r._v(" "),e("h3",{attrs:{id:"安装-portainer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装-portainer","aria-hidden":"true"}},[r._v("#")]),r._v(" 安装 portainer")]),r._v(" "),e("p",[r._v("为了方便管理、部署，这里选用了 Docker 的方式来进行安装。")]),r._v(" "),e("ol",[e("li",[e("p",[r._v("首先创建一个卷用于 portainer 的数据持久化。")]),r._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[r._v("docker volume create portainer_data\n")])])])]),r._v(" "),e("li",[e("p",[r._v("安装启动。")]),r._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[r._v("docker run -d -p "),e("span",{pre:!0,attrs:{class:"token number"}},[r._v("8000")]),r._v(":8000 -p "),e("span",{pre:!0,attrs:{class:"token number"}},[r._v("9000")]),r._v(":9000 --name"),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("=")]),r._v("portainer --restart"),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("=")]),r._v("always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce\n")])])]),e("p",[r._v("run 是将 portainer 镜像生成容器（如镜像不存在会自动去远程下载），然后启动容器。")]),r._v(" "),e("p",[r._v("-d 通过后台运行，两个 -p 是将容器的 8000 和 9000 端口分别映射到主机的 8000 和 9000 端口，因为 portainer 默认将其 UI 服务暴露在 9000 端口，TCP 通道暴露在 8000 端口，所以如果没有使用 TCP 通道这特性可以不对 8000 端口进行映射。")]),r._v(" "),e("p",[r._v("--restart=always 表示 Docker 重启后，该容器也会随着重启。两个-v，一个是用于与当前 Docker 的守护进程通信，另一个是 portainer 的数据持久化。")])])]),r._v(" "),e("h3",{attrs:{id:"访问、初始化配置-portainer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#访问、初始化配置-portainer","aria-hidden":"true"}},[r._v("#")]),r._v(" 访问、初始化配置 portainer")]),r._v(" "),e("p",[r._v("安装成功之后通过访问主机的 9000 端口即可访问 portainer 的 UI 界面。如主机 ip 为 192.168.0.103，则通过浏览器访问 http://192.168.0.103:9000/ 。")]),r._v(" "),e("p",[r._v("初次打开需要进行基本配置，管理员账号密码设置以及需要管理的环境类型选择。至此 portainer 的基本安装配置已经完成。")]),r._v(" "),e("p",[r._v("关于 portainer 的更多详情请查看"),e("a",{attrs:{href:"https://documentation.portainer.io/",target:"_blank",rel:"noopener noreferrer"}},[r._v("https://documentation.portainer.io/"),e("OutboundLink")],1),r._v("。")]),r._v(" "),e("h2",{attrs:{id:"参考"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考","aria-hidden":"true"}},[r._v("#")]),r._v(" 参考")]),r._v(" "),e("ol",[e("li",[e("a",{attrs:{href:"https://docs.docker.com/engine/install/",target:"_blank",rel:"noopener noreferrer"}},[r._v("https://docs.docker.com/engine/install/"),e("OutboundLink")],1)]),r._v(" "),e("li",[e("a",{attrs:{href:"https://docs.docker.com/engine/install/linux-postinstall/",target:"_blank",rel:"noopener noreferrer"}},[r._v("https://docs.docker.com/engine/install/linux-postinstall/"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=s.exports}}]);